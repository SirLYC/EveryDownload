import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

void generateUpdateInfo(String apkName) {
    println("------------------ Generating version info ------------------")
    def toDir = rootProject.file(buildInfo.updatePath)
    def updateJsonFile = new File(toDir, buildInfo.updateInfoFilename)
    def writeNewFile = true
    if (updateJsonFile.exists()) {
        try {
            def oldUpdateInfo = new JsonSlurper().parse(updateJsonFile)
            if (buildInfo.versionCode == oldUpdateInfo.code) {
                writeNewFile = false
            }
        } catch (Exception e) {
            e.printStackTrace()
            updateJsonFile.delete()
        }
    }

    if (writeNewFile) {
        def apkFile = project.file("build/outputs/apk/release/$apkName")
        if (!apkFile.exists()) {
            throw new GradleScriptException("apk file not exist!")
        }
        def oldFiles = toDir.listFiles()
        oldFiles.each {
            if (!it.delete()) {
                it.deleteOnExit()
            }
        }
        copy {
            from(apkFile)
            into(toDir)
        }
        def updateInfo = new Expando(
                code: buildInfo.versionCode,
                name: buildInfo.versionName,
                url: "${buildInfo.updateBaseUrl}${apkFile.name}",
                time: System.currentTimeMillis(),
                des: buildInfo.versionDes
        )
        def outputJson = new JsonBuilder(updateInfo).toPrettyString()
        println(outputJson)
        updateJsonFile.write(outputJson)
    } else {
        println("This version is already released.\n" +
                "VersionCode = ${buildInfo.versionCode}\n" +
                "Skip generateUpdateInfo.")
    }
    println("------------------ Finish Generating version info ------------------")
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.lyc.everydownload"
        minSdkVersion buildInfo.minSdkVersion
        targetSdkVersion buildInfo.targetSdkVersion
        versionCode buildInfo.versionCode
        versionName buildInfo.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }


    signingConfigs {
        release {
            def signConfig = rootProject.file('keys/keystore.properties')
            if (signConfig.exists()) {
                Properties props = new Properties()
                props.load(new FileInputStream(signConfig))
                storeFile file(props['KEYSTORE_FILE'])
                storePassword props['KEYSTORE_PWD']
                keyAlias props['KEY_ALIAS']
                keyPassword props['KEY_PWD']
            }
        }
    }

    buildTypes.all { buildType ->
        buildType.buildConfigField("String", "RAW_URL", "\"${buildInfo.updateBaseUrl}\"")
        buildType.buildConfigField("String", "APK_NAME", "\"${"EveryDownload-${buildType.name}-${defaultConfig.versionName}.apk"}\"")
        buildType.buildConfigField("String", "INFO_FILE_NAME", "\"${buildInfo.updateInfoFilename}\"")
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }

        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        def apkName = "EveryDownload-${variant.buildType.name}-${defaultConfig.versionName}.apk"
        variant.outputs.all {
            outputFileName = apkName
        }
        if (variant.buildType.name == "release") {
            variant.assembleProvider.get().doLast {
                generateUpdateInfo(apkName)
            }
        }
    }

    compileOptions {
        targetCompatibility = "8"
        sourceCompatibility = "8"
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation deps['downloader']
    implementation deps['appcompact']
    implementation deps['core']
    implementation deps['preference']
    implementation deps['material']
    implementation deps['constraintlayout']
    implementation deps['lifecycle-extensions']
    implementation deps['recyclerview']
    implementation deps['core-ktx']
    implementation deps['multi-type']
    implementation deps['lifecycle-ktx']
    implementation deps['kotlin-stdlib']
    implementation deps['rxpermissions']
    implementation deps['rxjava']
}
